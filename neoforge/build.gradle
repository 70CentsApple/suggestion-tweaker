plugins {
	id "me.shedaniel.unified-publishing"
}

repositories {
	maven { url "https://maven.neoforged.net/releases/" }
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common
	shadowCommon
	compileOnly.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common
}

dependencies {
	neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

	modApi "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

processResources {
	inputs.property "version", project.version
	inputs.property "cloth_version", rootProject.cloth_version

	filesMatching("META-INF/neoforge.mods.toml") {
		expand(
				"version": project.version,
				"cloth_version": rootProject.cloth_version
		)
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	input.set(shadowJar.archiveFile)
	dependsOn(shadowJar)
	archiveClassifier.set "neoforge"

	from(rootProject.file("LICENSE")) {
		rename { "${it}_${rootProject.archivesBaseName}"}
	}
}

jar {
	archiveClassifier.set "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

// configure the maven publication
publishing {
	publications {
		mavenNeoForge(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-neoforge"
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}

unifiedPublishing {
	project {
		displayName.set "[NeoForge $project.supported_version] v$project.version"
		releaseType.set "release"
		gameVersions.set(["1.20.5", "1.20.6"])
		gameLoaders.set(["neoforge"])

		relations {
			depends {
				curseforge.set "cloth-config"
				modrinth.set "cloth-config"
			}
		}

		System.getenv("changelog")?.with { String changelogg ->
			changelog.set changelogg
		}

		mainPublication remapJar

		System.getenv("curse_api_key")?.with { String key ->
			curseforge {
				token.set key
				id.set project.curseforge_id
				gameVersions.addAll "Java 21"
			}
		}

		System.getenv("modrinth_key")?.with { String key ->
			modrinth {
				token.set key
				id.set project.modrinth_id
				version = "$project.version+$project.name"
			}
		}
	}
}

rootProject.tasks.getByName("modPublish").dependsOn tasks.getByName("publishUnified")
